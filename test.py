from openai import OpenAI
from vanna.openai import OpenAI_Chat
from vanna.qdrant import Qdrant_VectorStore
from qdrant_client import QdrantClient
import httpx
from openai import OpenAI
import pandas as pd

client = OpenAI(
    base_url="http://aiapi-api.test.seres.cn/v1",
    api_key="sk-KzbWXgnY22sSBtkSNVSOscVH1SVIZCLTgoGzrqnnjKEQflqA"
    # http_client=httpx.Client(verify=False)
)

response = client.chat.completions.create(
    model="DeepSeek-V3-0324",
    messages=[{'role': 'system', 'content': 'You are a SQL expert. Please help to generate a SQL query to answer the question. Your response should ONLY be based on the given context and follow the response guidelines and format instructions. \n===Tables \n\n    CREATE TABLE bi_dataset (\n        person_code VARCHAR(65533) NULL,\n        position_code VARCHAR(65533) NOT NULL,\n        position_name VARCHAR(65533) NOT NULL,\n        organization_code VARCHAR(65533) NOT NULL,\n        organization_name VARCHAR(65533) NOT NULL,\n        empl_status VARCHAR(65533) NOT NULL,\n        company_code VARCHAR(65533) NOT NULL,\n        company_name VARCHAR(65533) NOT NULL,\n        sex VARCHAR(65533) NOT NULL,\n        height VARCHAR(65533) NOT NULL,\n        weight VARCHAR(65533) NOT NULL,\n        date_of_birth VARCHAR(65533) NOT NULL,\n        age VARCHAR(65533) NOT NULL,\n        key_employee VARCHAR(65533) NOT NULL,\n        core_position VARCHAR(65533) NOT NULL,\n        cadre_label VARCHAR(65533) NOT NULL,\n        expert_label VARCHAR(65533) NOT NULL,\n        native_place VARCHAR(65533) NOT NULL,\n        nation VARCHAR(65533) NOT NULL,\n        marital_status_name VARCHAR(65533) NOT NULL,\n        PRIMARY KEY (person_code)\n    );\n    \n\n\n===Additional Context \n\nBusiness Rules for BI Dataset:\n        - key_employee: 0 = regular employee, 1 = key employee\n        - core_position: 0 = regular position, 1 = core position\n        - cadre_label: 0 = non-management, 1 = management role\n        - expert_label: 0 = non-expert, 1 = expert/specialist\n        - Height and weight may be empty strings for some records\n        - Age is calculated from date_of_birth and stored as integer string\n\nData Quality Notes:\n        - Some records have empty height/weight fields\n        - All active employees have empl_status = "在职"\n        - Date format in date_of_birth is YYYY-MM-DD\n        - Chinese characters are used for position, organization, and company names\n        - Native place and nation fields may be empty for some records\n\nBI Dataset Data Dictionary:\n        - person_code: Unique identifier for each employee (e.g., 16385, 16388)\n        - position_name: Job position names in Chinese (e.g., 岗位56026, 岗位74842)\n        - organization_name: Department names in Chinese (e.g., 部门63750, 部门63616)\n        - company_name: Company/unit names in Chinese (e.g., 管控单位2017, 管控单位2030)\n        - empl_status: Employment status, "在职" means "Active/On duty"\n        - sex: Gender - "男" (Male) or "女" (Female)\n        - native_place: Native place (e.g., 重庆市, 四川省)\n        - nation: Nationality/Ethnicity (e.g., 汉族, 土家族)\n        - marital_status_name: Marital status - "已婚" (Married), "未婚" (Single)\n\n===Response Guidelines \n1. If the provided context is sufficient, please generate a valid SQL query without any explanations for the question. \n2. If the provided context is almost sufficient but requires knowledge of a specific string in a particular column, please generate an intermediate SQL query to find the distinct strings in that column. Prepend the query with a comment saying intermediate_sql \n3. If the provided context is insufficient, please explain why it can\'t be generated. \n4. Please use the most relevant table(s). \n5. If the question has been asked and answered before, please repeat the answer exactly as it was given before. \n6. Ensure that the output SQL is SQL-compliant and executable, and free of syntax errors. \n'}, {'role': 'user', 'content': 'Calculate average age by organization and show only those with more than 2 employees'}, {'role': 'assistant', 'content': "SELECT organization_name, \n                            COUNT(*) as employee_count,\n                            ROUND(AVG(CAST(age AS UNSIGNED)), 2) as avg_age\n                     FROM bi_dataset \n                     WHERE age != '' AND age REGEXP '^[0-9]+$'\n                     GROUP BY organization_name, organization_code\n                     HAVING COUNT(*) > 2\n                     ORDER BY avg_age DESC"}, {'role': 'user', 'content': 'Find employees older than 30 in core positions'}, {'role': 'assistant', 'content': "SELECT person_code, position_name, age, core_position, organization_name\n                     FROM bi_dataset \n                     WHERE CAST(age AS UNSIGNED) > 30 \n                     AND core_position = '1'\n                     ORDER BY age DESC"}, {'role': 'user', 'content': 'Find the youngest and oldest employee in each company'}, {'role': 'assistant', 'content': "SELECT company_name,\n                            MIN(CAST(age AS UNSIGNED)) as youngest_age,\n                            MAX(CAST(age AS UNSIGNED)) as oldest_age,\n                            MAX(CAST(age AS UNSIGNED)) - MIN(CAST(age AS UNSIGNED)) as age_range\n                     FROM bi_dataset\n                     WHERE age != '' AND age REGEXP '^[0-9]+$'\n                     GROUP BY company_name, company_code\n                     ORDER BY age_range DESC"}, {'role': 'user', 'content': 'Find employees with complete physical data (height and weight)'}, {'role': 'assistant', 'content': "SELECT person_code, position_name, sex, height, weight, age\n                     FROM bi_dataset\n                     WHERE height != '' AND height IS NOT NULL \n                     AND weight != '' AND weight IS NOT NULL\n                     ORDER BY CAST(age AS UNSIGNED) DESC"}, {'role': 'user', 'content': 'How many employees are currently active?'}, {'role': 'assistant', 'content': "SELECT COUNT(*) as active_employees FROM bi_dataset WHERE empl_status = '在职'"}, {'role': 'user', 'content': 'What is the gender distribution?'}, {'role': 'assistant', 'content': "SELECT sex, COUNT(*) as count\n                     FROM bi_dataset\n                     WHERE sex != ''\n                     GROUP BY sex"}, {'role': 'user', 'content': 'Show marital status distribution'}, {'role': 'assistant', 'content': "SELECT marital_status_name, COUNT(*) as count\n                     FROM bi_dataset\n                     WHERE marital_status_name != ''\n                     GROUP BY marital_status_name"}, {'role': 'user', 'content': 'What are the top 5 companies by employee count?'}, {'role': 'assistant', 'content': 'SELECT company_name, COUNT(*) as employee_count \n                     FROM bi_dataset \n                     GROUP BY company_name, company_code \n                     ORDER BY employee_count DESC \n                     LIMIT 5'}, {'role': 'user', 'content': 'Show nationality distribution with counts'}, {'role': 'assistant', 'content': "SELECT nation, COUNT(*) as count\n                     FROM bi_dataset\n                     WHERE nation != '' AND nation IS NOT NULL\n                     GROUP BY nation\n                     ORDER BY count DESC"}, {'role': 'user', 'content': 'Show me all key employees'}, {'role': 'assistant', 'content': "SELECT person_code, position_name, organization_name, company_name, sex\n                     FROM bi_dataset \n                     WHERE key_employee = '1'"}, {'role': 'user', 'content': 'Average age by organization'}],
    stop=None,
    temperature=0.7,
)
print(response.choices[0].message.content)